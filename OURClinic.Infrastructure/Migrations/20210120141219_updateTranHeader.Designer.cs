// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OURCart.Infrastructure.Util;

namespace OURCart.Infrastructure.Migrations
{
    [DbContext(typeof(OurCartDBContext))]
    [Migration("20210120141219_updateTranHeader")]
    partial class updateTranHeader
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OURCart.DataModel.DTO.Area", b =>
                {
                    b.Property<int>("AreaId");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AreaNameEn")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("DeliveryAmount")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int?>("FkStoreId")
                        .HasColumnName("fkStoreId");

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("InsUserId")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("UpdUserId")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("AreaId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.CartProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("FkDeliveryClientId")
                        .HasColumnName("fk_DeliveryClientId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal>("FkItemId")
                        .HasColumnName("FkItemId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<DateTime?>("InsertDateTime")
                        .HasColumnName("insertDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsNew");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<decimal>("fkPackageID")
                        .HasColumnName("fkPackageID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("fk_itemBarCodeID");

                    b.HasKey("Id");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.Client", b =>
                {
                    b.Property<decimal>("ClientId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("ActivationCode");

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<int?>("AreaId");

                    b.Property<int?>("CityId");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ClientNameEng")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(250);

                    b.Property<byte?>("ClientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClientTypeID")
                        .HasDefaultValueSql("((3))");

                    b.Property<string>("CommercailRegistryNo")
                        .HasMaxLength(250);

                    b.Property<string>("ContractNotes")
                        .HasMaxLength(500);

                    b.Property<decimal?>("ContractPeriod")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContractStartDate")
                        .HasMaxLength(50);

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("CreditLimitInvoice")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("CreditPeriod")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(250);

                    b.Property<string>("FkAccNo")
                        .HasColumnName("fkAccNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("FkAgeGroupId")
                        .HasColumnName("fkAgeGroupID");

                    b.Property<string>("FkClientCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fkClientCategoryID")
                        .HasDefaultValueSql("((0))")
                        .HasMaxLength(250);

                    b.Property<string>("FkSalesRepId")
                        .HasColumnName("fkSalesRepId")
                        .HasMaxLength(5);

                    b.Property<string>("InsDate")
                        .HasMaxLength(8);

                    b.Property<string>("InsUserId")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActivated");

                    b.Property<string>("KeyPerson")
                        .HasMaxLength(500);

                    b.Property<string>("Mobile")
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .HasMaxLength(255);

                    b.Property<string>("Phone1")
                        .HasMaxLength(250);

                    b.Property<byte?>("PriceCatId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((3))");

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TaxCardNo")
                        .HasMaxLength(250);

                    b.Property<string>("TaxFileNo")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TaxRegistrationNo")
                        .HasMaxLength(250);

                    b.Property<string>("UpdDate")
                        .HasMaxLength(8);

                    b.Property<int?>("UpdUserId");

                    b.Property<decimal?>("WithholdingTax")
                        .HasColumnType("numeric(18, 2)");

                    b.HasKey("ClientId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.DeliveryClient", b =>
                {
                    b.Property<decimal>("DelClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(1000);

                    b.Property<string>("Apartment")
                        .HasMaxLength(50);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ClientNameEn")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("FkAccNo")
                        .HasColumnName("fkAccNo")
                        .HasMaxLength(50);

                    b.Property<int?>("FkAreaId")
                        .HasColumnName("fkAreaId");

                    b.Property<int?>("FkMemberShipId")
                        .HasColumnName("fkMemberShipId");

                    b.Property<string>("Floor")
                        .HasMaxLength(50);

                    b.Property<string>("HouseNum");

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsUserId")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("LocationAddress");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(250);

                    b.Property<string>("Phone1")
                        .HasMaxLength(50);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50);

                    b.Property<string>("Phone3")
                        .HasMaxLength(50);

                    b.Property<decimal>("PointsBalance")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal>("Posdiscount")
                        .HasColumnName("POSDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<bool>("PosdiscountType")
                        .HasColumnName("POSDiscountType");

                    b.Property<string>("PrintNotes")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("SalesBalance")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("SpecialMark")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdUserId")
                        .HasMaxLength(250);

                    b.Property<bool>("WholeSale");

                    b.HasKey("DelClientId");

                    b.HasIndex("FkAreaId");

                    b.ToTable("DeliveryClient");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.Favourites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("FkDeliveryClientId")
                        .HasColumnName("fk_deliveryClientID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal>("FkItemID");

                    b.Property<decimal>("FkItemPackageId")
                        .HasColumnName("fk_itemPackageID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("InsDateTime")
                        .HasColumnName("insDateTime")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("FkItemID");

                    b.ToTable("favourites");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemBarCode", b =>
                {
                    b.Property<decimal>("ItemBarCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemBarCodeID")
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("BarCodeFormat")
                        .HasMaxLength(50);

                    b.Property<decimal?>("BarCodePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<decimal>("FkItemId")
                        .HasColumnName("fkItemID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal>("FkItemPackageId")
                        .HasColumnName("fkItemPackageID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<short>("FkPackageId")
                        .HasColumnName("fkPackageID");

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsUserName")
                        .HasMaxLength(250);

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdUserName")
                        .HasMaxLength(250);

                    b.HasKey("ItemBarCodeId");

                    b.HasIndex("FkItemId");

                    b.HasIndex("FkPackageId");

                    b.HasIndex("BarCode", "FkItemPackageId", "FkItemId")
                        .IsUnique()
                        .HasName("UniqueBarCode");

                    b.ToTable("ItemBarCode");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("CategoryNameEng")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("FkShopId")
                        .HasColumnName("fkShopID");

                    b.Property<string>("InsDate")
                        .HasMaxLength(50);

                    b.Property<string>("InsUserId")
                        .HasMaxLength(250);

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UpdDate")
                        .HasMaxLength(50);

                    b.Property<string>("UpdUserId")
                        .HasMaxLength(50);

                    b.HasKey("CategoryId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemPriceAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttributeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttrebuteName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AttributeId")
                        .HasName("PK_ItemPriceAttribute_1");

                    b.ToTable("ItemPriceAttribute");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemType", b =>
                {
                    b.Property<byte>("ItemTypeId");

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ItemTypeNameEng")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemType");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.Items", b =>
                {
                    b.Property<decimal>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Additions")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("AdditionsRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<decimal?>("AllowedExcessRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<decimal?>("AnnualDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("AnnualDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<decimal?>("CashDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("CashDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<decimal?>("DeferralDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("DeferralDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<int?>("ExpiryDays");

                    b.Property<decimal?>("ExtraDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("ExtraDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<int>("FkCategoryId")
                        .HasColumnName("fkCategoryId");

                    b.Property<string>("FkFixedAssetId")
                        .HasColumnName("fkFixedAssetId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<byte>("FkItemTypeId")
                        .HasColumnName("fkItemTypeId");

                    b.Property<int?>("FkVariantAid")
                        .HasColumnName("fkVariantAID");

                    b.Property<int?>("FkVariantBid")
                        .HasColumnName("fkVariantBID");

                    b.Property<decimal?>("FkVendorId")
                        .HasColumnName("fkVendorId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<bool?>("HasSerial");

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsUserName")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsForResale");

                    b.Property<bool?>("IsOpenSale");

                    b.Property<bool?>("IsRecipe");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ItemNameEn")
                        .HasMaxLength(255);

                    b.Property<decimal?>("ItemTax")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("ItemTaxRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<string>("MainImgUrl")
                        .HasMaxLength(255);

                    b.Property<decimal?>("MaxOrderQty")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("MaxOrderQuantity")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("MaxStockQuantity")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("MonthlyDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("MonthlyDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<decimal?>("OnHandQty")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("PurchaseDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("PurchaseDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<string>("PurchaseNotes")
                        .HasMaxLength(500);

                    b.Property<decimal?>("QtyIncreaseBy")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("QuarterAnnualDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("QuarterAnnualDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal?>("ReorderQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 3)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("ReturnDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("ReturnDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.Property<string>("SalesNotes")
                        .HasMaxLength(500);

                    b.Property<string>("SearchItemName")
                        .HasMaxLength(255);

                    b.Property<bool?>("ShowSalesInClosure");

                    b.Property<bool?>("ShowStockInClosure");

                    b.Property<bool?>("StopInventory");

                    b.Property<bool?>("StopPurchase");

                    b.Property<bool?>("StopSale");

                    b.Property<bool?>("StopTransfer");

                    b.Property<DateTime?>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdUserName")
                        .HasMaxLength(250);

                    b.Property<decimal?>("VendorDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("VendorDiscountRate")
                        .HasColumnType("numeric(6, 3)");

                    b.HasKey("ItemId")
                        .HasName("PK_Item");

                    b.HasIndex("FkCategoryId")
                        .HasName("idx_Item_fkCategoryId");

                    b.HasIndex("FkItemTypeId")
                        .HasName("idx_Item_fkItemTypeId");

                    b.HasIndex("FkVendorId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemsPackages", b =>
                {
                    b.Property<decimal>("ItemPackageId")
                        .HasColumnName("ItemPackageID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal>("FkItemId")
                        .HasColumnName("fkItemID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("CustomerPrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<short>("FkPackageId")
                        .HasColumnName("fkPackageID");

                    b.Property<int?>("FkPriceAttributeValA")
                        .HasColumnName("fkPriceAttributeValA");

                    b.Property<int?>("FkPriceAttributeValB")
                        .HasColumnName("fkPriceAttributeValB");

                    b.Property<decimal?>("HalfWholeSalePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("HalfWholeSaleProfit")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsUserName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<decimal?>("ItemCost")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal>("QtyPerPackage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 3)")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal?>("SaleProfit")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<DateTime?>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdUserName")
                        .HasMaxLength(250);

                    b.Property<decimal?>("WholeSalePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("WholeSaleProfit")
                        .HasColumnType("numeric(18, 3)");

                    b.HasKey("ItemPackageId", "FkItemId");

                    b.HasIndex("FkItemId");

                    b.HasIndex("FkPackageId");

                    b.ToTable("ItemsPackages");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemsVendors", b =>
                {
                    b.Property<int>("ItemVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemVendorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkItemId")
                        .HasColumnName("fkItemID");

                    b.Property<int>("FkVendorId")
                        .HasColumnName("fkVendorID");

                    b.HasKey("ItemVendorId");

                    b.ToTable("ItemsVendors");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.CartTotalModel", b =>
                {
                    b.Property<decimal>("total");

                    b.HasKey("total");

                    b.ToTable("CartTotalModel");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.CategoryItem", b =>
                {
                    b.Property<decimal>("ItemId");

                    b.Property<string>("BarCode");

                    b.Property<string>("BarCodeFormat");

                    b.Property<decimal?>("CustomerPrice");

                    b.Property<decimal>("ItemBarCodeID");

                    b.Property<string>("ItemCode");

                    b.Property<decimal?>("ItemCost");

                    b.Property<string>("ItemName");

                    b.Property<string>("ItemNameEn");

                    b.Property<decimal>("ItemPackageID");

                    b.Property<string>("MainImgUrl");

                    b.Property<string>("Notes");

                    b.Property<decimal>("PackageId");

                    b.Property<string>("PackageName");

                    b.Property<string>("PackageNameEn");

                    b.Property<byte>("PackageSize");

                    b.Property<decimal?>("PurchaseDiscount");

                    b.Property<int>("fkCategoryId");

                    b.HasKey("ItemId");

                    b.ToTable("CategorItem");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.CategoryItemsDisplayItem", b =>
                {
                    b.Property<decimal>("ItemId");

                    b.Property<string>("BarCode");

                    b.Property<string>("BarCodeFormat");

                    b.Property<decimal?>("CustomerPrice");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("ItemBarCodeID");

                    b.Property<string>("ItemCode");

                    b.Property<decimal?>("ItemCost");

                    b.Property<string>("ItemName");

                    b.Property<decimal>("ItemPackageID");

                    b.Property<string>("Notes");

                    b.Property<short>("PackageId");

                    b.Property<string>("PackageName");

                    b.Property<string>("PackageNameEn");

                    b.Property<byte>("PackageSize");

                    b.Property<decimal?>("PurchaseDiscount");

                    b.Property<int>("fkCategoryId");

                    b.HasKey("ItemId");

                    b.ToTable("CategoryItemsDisplayItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CategoryItemsDisplayItem");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.OffersModel", b =>
                {
                    b.Property<decimal>("ItemId");

                    b.Property<decimal>("CustPrice");

                    b.Property<string>("InsDate");

                    b.Property<decimal>("ItemCost");

                    b.Property<string>("ItemName");

                    b.Property<string>("ItemNameEn");

                    b.Property<decimal>("ItemTax");

                    b.Property<decimal>("NewCustPrice");

                    b.Property<string>("PromoDateFrom");

                    b.Property<string>("PromoDateTo");

                    b.Property<decimal>("PromoHeaderId");

                    b.Property<string>("PromoName");

                    b.Property<decimal>("PromoNo");

                    b.Property<string>("PromoTimeFrom");

                    b.Property<string>("PromoTimeTo");

                    b.Property<string>("PurchaseDateFrom");

                    b.Property<string>("PurchaseDateTo");

                    b.Property<string>("TransDate");

                    b.Property<decimal?>("VendDiscount");

                    b.HasKey("ItemId");

                    b.ToTable("offers");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.itemsCountInCategory", b =>
                {
                    b.Property<int>("itemsCount")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("itemsCount");

                    b.ToTable("itemsCountInCategory");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.userCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<string>("BarCodeFormat");

                    b.Property<decimal?>("CustomerPrice");

                    b.Property<string>("ItemCode");

                    b.Property<decimal?>("ItemCost");

                    b.Property<decimal>("ItemId");

                    b.Property<string>("ItemName");

                    b.Property<decimal>("ItemPackageId");

                    b.Property<string>("Notes");

                    b.Property<decimal>("PackageId");

                    b.Property<string>("PackageName");

                    b.Property<string>("PackageNameEn");

                    b.Property<byte>("PackageSize");

                    b.Property<decimal?>("PurchaseDiscount");

                    b.Property<int>("fkCategoryId");

                    b.Property<decimal>("fk_DeliveryClientId");

                    b.Property<decimal?>("fk_itemBarCodeID");

                    b.Property<DateTime?>("insertDateTime");

                    b.Property<int>("quantity");

                    b.HasKey("Id");

                    b.ToTable("userCartItem");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.Package", b =>
                {
                    b.Property<short>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsUser")
                        .HasMaxLength(250);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PackageNameEn")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte?>("PackageSize");

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdUser")
                        .HasMaxLength(250);

                    b.HasKey("PackageId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.PoscurrentDailyTransDetails", b =>
                {
                    b.Property<decimal>("DetailId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int>("FkBrId")
                        .HasColumnName("fkBrId");

                    b.Property<decimal>("HeaderId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<byte>("FktransTypeId")
                        .HasColumnName("fktransTypeID");

                    b.Property<decimal>("AffectedPieces")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("BarcodeDescription")
                        .HasMaxLength(255);

                    b.Property<decimal>("CustPrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("DiscHeader")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("DiscMember")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("DiscPromo")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("DiscSeason")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal>("FkItemBarcodeId")
                        .HasColumnName("fkItemBarcodeId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("FkParentItemId")
                        .HasColumnName("fkParentItemId");

                    b.Property<int>("FkStoreId")
                        .HasColumnName("fkStoreId");

                    b.Property<decimal?>("HalfWholeSalePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsUserId");

                    b.Property<decimal>("ItemCost")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal>("ItemId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<short>("PackageId");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<int>("QtyPerPackage");

                    b.Property<decimal?>("ReturnedQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 3)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("TransDate")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<decimal?>("VendDiscount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("VendDiscountRate")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("WholeSalePrice")
                        .HasColumnType("numeric(18, 3)");

                    b.HasKey("DetailId", "FkBrId", "HeaderId", "FktransTypeId");

                    b.HasIndex("HeaderId", "FkBrId", "FktransTypeId");

                    b.ToTable("POSCurrentDailyTransDetails");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.PoscurrentDailyTransHeader", b =>
                {
                    b.Property<decimal>("HeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkBrId")
                        .HasColumnName("fkBrId");

                    b.Property<byte>("FkTransTypeId")
                        .HasColumnName("fkTransTypeID");

                    b.Property<decimal?>("Addition")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("AdditionRate")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("CallerPhone")
                        .HasMaxLength(15);

                    b.Property<int?>("CashierId");

                    b.Property<string>("CashierName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal?>("ClientId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(255);

                    b.Property<int?>("CreditPeriod");

                    b.Property<decimal?>("DeliveryAmount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("DueDate")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<byte?>("FkClientTypeId")
                        .HasColumnName("fkClientTypeID");

                    b.Property<short?>("FkDeliveryStatusId")
                        .HasColumnName("fkDeliveryStatusId");

                    b.Property<int?>("FkEmpId")
                        .HasColumnName("fkEmpId");

                    b.Property<byte>("FkInvoiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fkInvoiceStatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte?>("FkPaymentTypeId")
                        .HasColumnName("fkPaymentTypeId");

                    b.Property<decimal?>("FkPosCloseId")
                        .HasColumnName("fkPosCloseId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("FkVisaCardId")
                        .HasColumnName("fkVisaCardId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<short?>("FkVisaMachineId")
                        .HasColumnName("fkVisaMachineId");

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsDeliveryClosed")
                        .HasMaxLength(50);

                    b.Property<string>("InsDeliverySent")
                        .HasMaxLength(50);

                    b.Property<decimal?>("InsUserId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("InsUserName")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsPickupIn");

                    b.Property<decimal?>("ManualNo")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("Notes")
                        .HasMaxLength(100);

                    b.Property<string>("OrgheaderRef")
                        .HasColumnName("ORGHeaderRef")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Paid")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("PicupDate")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<byte[]>("RecId")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("RefNo")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Remain")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<byte?>("SalePriceType");

                    b.Property<string>("SalesRepId")
                        .HasMaxLength(5);

                    b.Property<string>("SalesRepName")
                        .HasMaxLength(255);

                    b.Property<int?>("StoreId");

                    b.Property<string>("StoreName")
                        .HasMaxLength(255);

                    b.Property<decimal?>("SubTotal")
                        .HasColumnName("subTotal")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("TransDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<decimal?>("TransNumber")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("UpdDate")
                        .HasMaxLength(8);

                    b.Property<decimal?>("UpdUserId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("VisaAmount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("VisaCardDeduct")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<decimal?>("VisaCardDeductAmount")
                        .HasColumnType("numeric(18, 3)");

                    b.Property<string>("VisaCardInfo")
                        .HasMaxLength(200);

                    b.HasKey("HeaderId", "FkBrId", "FkTransTypeId")
                        .HasName("PK_POSCurrentDailyTransHeader_1");

                    b.HasAlternateKey("HeaderId");

                    b.ToTable("POSCurrentDailyTransHeader");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.LocalModels.CategoryOffersDisplayItem", b =>
                {
                    b.HasBaseType("OURCart.DataModel.DTO.LocalModels.CategoryItemsDisplayItem");

                    b.Property<decimal?>("CustPrice");

                    b.Property<decimal?>("NewCustPrice");

                    b.Property<string>("PromoDateFrom");

                    b.Property<string>("PromoDateTo");

                    b.Property<string>("PromoName");

                    b.Property<decimal>("PromoNo");

                    b.Property<string>("TransDate");

                    b.HasDiscriminator().HasValue("CategoryOffersDisplayItem");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.DeliveryClient", b =>
                {
                    b.HasOne("OURCart.DataModel.DTO.Area", "FkArea")
                        .WithMany("DeliveryClient")
                        .HasForeignKey("FkAreaId")
                        .HasConstraintName("FK_DeliveryClient_DeliveryClient");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.Favourites", b =>
                {
                    b.HasOne("OURCart.DataModel.DTO.Items", "Item")
                        .WithMany()
                        .HasForeignKey("FkItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemBarCode", b =>
                {
                    b.HasOne("OURCart.DataModel.DTO.Items", "FkItem")
                        .WithMany("ItemBarCode")
                        .HasForeignKey("FkItemId")
                        .HasConstraintName("FK_ItemBarCode_Items")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OURCart.DataModel.DTO.Package", "FkPackage")
                        .WithMany("ItemBarCode")
                        .HasForeignKey("FkPackageId")
                        .HasConstraintName("FK_ItemBarCode_Package");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.Items", b =>
                {
                    b.HasOne("OURCart.DataModel.DTO.ItemCategory", "FkCategory")
                        .WithMany("Items")
                        .HasForeignKey("FkCategoryId")
                        .HasConstraintName("ref_Items_ItemCategory1");

                    b.HasOne("OURCart.DataModel.DTO.ItemType", "FkItemType")
                        .WithMany("Items")
                        .HasForeignKey("FkItemTypeId")
                        .HasConstraintName("ref_Items_ItemType");

                    b.HasOne("OURCart.DataModel.DTO.Client", "FkVendor")
                        .WithMany("Items")
                        .HasForeignKey("FkVendorId")
                        .HasConstraintName("FK_Items_Client");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.ItemsPackages", b =>
                {
                    b.HasOne("OURCart.DataModel.DTO.Items", "FkItem")
                        .WithMany("ItemsPackages")
                        .HasForeignKey("FkItemId")
                        .HasConstraintName("FK_ItemsPackages_Items")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OURCart.DataModel.DTO.Package", "FkPackage")
                        .WithMany("ItemsPackages")
                        .HasForeignKey("FkPackageId")
                        .HasConstraintName("FK_ItemsPackages_Package");
                });

            modelBuilder.Entity("OURCart.DataModel.DTO.PoscurrentDailyTransDetails", b =>
                {
                    b.HasOne("OURCart.DataModel.DTO.PoscurrentDailyTransHeader", "PoscurrentDailyTransHeader")
                        .WithMany("PoscurrentDailyTransDetails")
                        .HasForeignKey("HeaderId", "FkBrId", "FktransTypeId")
                        .HasConstraintName("FK_POSCurrentDailyTransDetails_POSCurrentDailyTransHeader")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
